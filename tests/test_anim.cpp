#include "test_common.h"

#include <string>

#include "../Anim.h"

namespace {
    unsigned char __anim[] = {
            0x41, 0x4e, 0x49, 0x4d, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00,
            0x30, 0x01, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x78, 0x01, 0x00, 0x00,
            0x84, 0x00, 0x00, 0x00, 0x42, 0x6f, 0x6e, 0x65, 0x30, 0x31, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xbd, 0x93, 0x60,
            0x30, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x6f, 0x6e, 0x65,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x42, 0x6f, 0x6e, 0x65, 0x30, 0x32, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xbd, 0x93, 0x60,
            0x30, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x6f, 0x6e, 0x65,
            0x30, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x41, 0x72, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65,
            0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x09, 0x39, 0x00, 0x28, 0x30, 0x2e, 0x30, 0x00,
            0x30, 0x2e, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x18, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xf3, 0x04, 0x35, 0x3f, 0xf4, 0x04, 0x35, 0x3f, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xf3, 0x04, 0x35, 0x3f, 0xf4, 0x04, 0x35, 0x3f,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x40, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf3, 0x04, 0x35, 0x3f,
            0xf4, 0x04, 0x35, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xf3, 0x04, 0x35, 0x3f, 0xf4, 0x04, 0x35, 0x3f, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xf3, 0x04, 0x35, 0x3f, 0xf4, 0x04, 0x35, 0x3f,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf3, 0x04, 0x35, 0xbf,
            0xf4, 0x04, 0x35, 0x3f
    };
    unsigned int __anim_len = 508;
}

void test_anim() {
    {   // Load anim
        R::AnimSequenceRef anim_ref = R::LoadAnimSequence("anim", __anim);

        assert(anim_ref.index == 0);

        R::AnimSequence *anim = R::GetAnimSequence(anim_ref);

        assert(anim != nullptr);
        assert(std::string(anim->name) == "ArmatureAction");
        assert(anim->fps == 24);
        assert(anim->len == 3);
        assert(anim->frame_size == 11 );
        assert(anim->frame_dur == 1.0f/24);
        assert(anim->anim_dur == 3.0f/24);
        assert(anim->frames != nullptr);
        assert(anim->bones != nullptr);
        assert(anim->num_bones == 2);

        assert(std::string(anim->bones[0].name) == "Bone01");
        assert(std::string(anim->bones[0].parent_name) == "None");
        assert(anim->bones[0].id == 0);
        assert(anim->bones[0].offset == 0);
        assert((anim->bones[0].flags & R::AnimHasTranslate) == 1);

        assert(std::string(anim->bones[1].name) == "Bone02");
        assert(std::string(anim->bones[1].parent_name) == "Bone01");
        assert(anim->bones[1].id == 1);
        assert(anim->bones[1].offset == 7); // 4 for rotation, 3 for translation from previous bone
        assert((anim->bones[1].flags & R::AnimHasTranslate) == 0);

        //translation of Bone01 frame 0
        assert(anim->frames[0] == 0);
        assert(anim->frames[1] == 0);
        assert(anim->frames[2] == 0);

        // rotation of Bone01 frame 0
        assert(anim->frames[3] == 0);
        assert(anim->frames[4] == 0);
        assert(anim->frames[5] == Approx(0.7071067690849304).epsilon(0.0001));
        assert(anim->frames[6] == Approx(0.7071067690849304).epsilon(0.0001));

        // rotation of Bone02 frame 0
        assert(anim->frames[7] == 0);
        assert(anim->frames[8] == 0);
        assert(anim->frames[9] == Approx(0.7071067690849304).epsilon(0.0001));
        assert(anim->frames[10] == Approx(0.7071067690849304).epsilon(0.0001));

        //translation of Bone01 frame 1
        assert(anim->frames[11] == 0);
        assert(anim->frames[12] == 5);
        assert(anim->frames[13] == 0);

        // rotation of Bone01 frame 1
        assert(anim->frames[14] == 0);
        assert(anim->frames[15] == 0);
        assert(anim->frames[16] == Approx(0.7071067690849304).epsilon(0.0001));
        assert(anim->frames[17] == Approx(0.7071067690849304).epsilon(0.0001));

        // rotation of Bone02 frame 1
        assert(anim->frames[18] == 0);
        assert(anim->frames[19] == 0);
        assert(anim->frames[20] == Approx(0.7071067690849304).epsilon(0.0001));
        assert(anim->frames[21] == Approx(0.7071067690849304).epsilon(0.0001));

        //translation of Bone01 frame 2
        assert(anim->frames[22] == 0);
        assert(anim->frames[23] == 0);
        assert(anim->frames[24] == 0);

        // rotation of Bone01 frame 2
        assert(anim->frames[25] == 0);
        assert(anim->frames[26] == 0);
        assert(anim->frames[27] == Approx(0.7071067690849304).epsilon(0.0001));
        assert(anim->frames[28] == Approx(0.7071067690849304).epsilon(0.0001));

        // rotation of Bone02 frame 2
        assert(anim->frames[29] == 0);
        assert(anim->frames[30] == 0);
        assert(anim->frames[31] == Approx(-0.7071067690849304).epsilon(0.0001));
        assert(anim->frames[32] == Approx(0.7071067690849304).epsilon(0.0001));
    }

}
